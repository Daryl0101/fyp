"""
Django settings for food_allocation project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

from celery.schedules import crontab

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "psycopg",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_swagger",
    "drf_spectacular",
    "app_backend.apps.AppBackendConfig",
    # "app_frontend.apps.AppFrontendConfig",
    "django_celery_beat",
    "corsheaders",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # "PAGE_SIZE": 10,
}

SPECTACULAR_SETTINGS = {
    "TITLE": "ReAlloc API",
    "DESCRIPTION": "ReAlloc API Documentation",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": r"/api/v[0-9]",
    "SWAGGER_UI_SETTINGS": """{
        deepLinking: true,
        urls: [{url: "/api/schema?version=v1", name: "v1"}, {url: "/api/schema?version=v2", name: "v2"}],
        presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],
        layout: "StandaloneLayout",
    }""",
    "COMPONENT_SPLIT_REQUEST": True,
}

MIDDLEWARE = [
    # "app_backend.middlewares.errorHandlingMiddleware.ErrorHandlingMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = False
CORS_ORIGIN_WHITELIST = (os.getenv("FRONTEND_BASE_URL"),)

ROOT_URLCONF = "food_allocation.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "food_allocation.wsgi.application"
ASGI_APPLICATION = "food_allocation.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                ("localhost", "6379")
                # {
                #     "address": "redis://password@localhost:6379",
                # }
            ],
        },
    },
}

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": "localhost",
        "PORT": "5432",
    }
}

DATE_INPUT_FORMAT = [
    "%Y-%m-%d",  # '2006-10-25'
    "%d/%m/%Y",  # '10/25/2006'
    "%d/%m/%y",  # '10/25/06'
    "%b %d %Y",  # 'Oct 25 2006'
    "%b %d, %Y",  # 'Oct 25, 2006'
    "%d %b %Y",  # '25 Oct 2006'
    "%d %b, %Y",  # '25 Oct, 2006'
    "%B %d %Y",  # 'October 25 2006'
    "%B %d, %Y",  # 'October 25, 2006'
    "%d %B %Y",  # '25 October 2006'
    "%d %B, %Y",  # '25 October, 2006'
]


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kuala_Lumpur"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "app_backend.User"

CELERY_BROKER_URL = f"amqp://{os.environ.get('RABBITMQ_DEFAULT_USER')}:{os.environ.get('RABBITMQ_DEFAULT_PASS')}@localhost//"
CELERY_RESULT_BACKEND = "redis://"
CELERY_TASK_ROUTES = {
    "app_backend.tasks.allocation_tasks.*": {"queue": "realloc_allocation"},
    # "app_backend.tasks.daily_tasks.*": {
    #     "queue": "realloc_scheduled_daily"
    # },
}
CELERY_TIMEZONE = "Asia/Kuala_Lumpur"
CELERY_BEAT_SCHEDULE = {
    "reject-expired-allocation-daily": {
        "task": "app_backend.tasks.daily_tasks.taskProcessRejectExpiredAllocationFamilies",
        "schedule": crontab(minute=0, hour=0),
        # "schedule": crontab(minute="*/1"),  # for testing
        "options": {
            "queue": "realloc_scheduled_daily",
        },
    },
    "reject-expired-package-daily": {
        "task": "app_backend.tasks.daily_tasks.taskProcessCancelExpiredPackages",
        "schedule": crontab(minute=0, hour=0),
        # "schedule": crontab(minute="*/1"),  # for testing
        "options": {
            "queue": "realloc_scheduled_daily",
        },
    },
    "inform-nearing-expired-inventories-daily": {
        "task": "app_backend.tasks.daily_tasks.taskProcessInformNearingExpiredInventories",
        "schedule": crontab(minute=0, hour=0),
        # "schedule": crontab(minute="*/1"),  # for testing
        "options": {
            "queue": "realloc_scheduled_daily",
        },
    },
    "inform-expired-inventories-daily": {
        "task": "app_backend.tasks.daily_tasks.taskProcessInformExpiredInventories",
        "schedule": crontab(minute=0, hour=0),
        # "schedule": crontab(minute="*/1"),  # for testing
        "options": {
            "queue": "realloc_scheduled_daily",
        },
    },
    "remove-expired-notifications-daily": {
        "task": "app_backend.tasks.daily_tasks.taskProcessRemoveExpiredNotifications",
        "schedule": crontab(minute=0, hour=0),
        # "schedule": crontab(minute="*/1"),  # for testing
        "options": {
            "queue": "realloc_scheduled_daily",
        },
    },
}
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# region Storage Settings
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": os.environ.get("MINIO_ROOT_USER"),
            "secret_key": os.environ.get("MINIO_ROOT_PASSWORD"),
            "bucket_name": os.environ.get("MINIO_BUCKET_NAME"),
            "endpoint_url": os.environ.get("MINIO_ENDPOINT_URL"),
            "file_overwrite": False,
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": os.environ.get("MINIO_ROOT_USER"),
            "secret_key": os.environ.get("MINIO_ROOT_PASSWORD"),
            "bucket_name": "staticfiles",
            "endpoint_url": os.environ.get("MINIO_ENDPOINT_URL"),
            "file_overwrite": False,
        },
    },
}
# endregion
